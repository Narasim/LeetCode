class Solution(object):
    def firstMissingPositive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums = list(set(nums))
        nums.sort()
        flag = -1
        found = 0
        if(len(nums) == 1 and nums[0] == 1 ):
            return nums[0]+1
        elif(len(nums) == 1 and nums[0] != 1):
            return 1
        if(len(nums) == 2):
            if(nums[0] == 1 or nums[1] == 1):
                found = 1
            if(nums[0] != nums[1]-1):
                flag = 2
        if(nums[-1] == 1):
            found = 1
            flag = 2

        if(flag == -1):
            for i in range(len(nums)-1):
                if(nums[i] <= 0):
                    continue
                if(nums[i]>0):
                    if(nums[i] == 1):
                        found = 1
                    if(nums[i] != nums[i+1]-1 and flag == -1):
                        flag = nums[i]+1
        if(found == 1 and flag == -1):
            return nums[-1]+1
        elif(found == 1 and flag != -1):
            return flag
        elif(found == 0):
            return 1
            
            
            
# Best Solution
# for element beginning from 1, if it is present in the set then continue else return key
hs = set(nums)
min_key = 1
while min_key in hs:
      min_key += 1 
return min_key
